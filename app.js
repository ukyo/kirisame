// Generated by CoffeeScript 1.4.0
(function() {
  var Entry, addCsrfToken, addDefaultContext, addRecentEntries, addTagCloud, app, auth, config, express, genOnComplete, http, model, overwritePageIndex, path;

  express = require('express');

  http = require('http');

  path = require('path');

  auth = require('./auth');

  model = require('./model');

  config = require('./config');

  Entry = model.Entry;

  app = express();

  addRecentEntries = function(req, res, next) {
    return Entry.getRecentEntries(function(err, recentEntries) {
      res.locals({
        recentEntries: recentEntries
      });
      return next();
    });
  };

  addTagCloud = function(req, res, next) {
    return Entry.getTagCloud(function(err, tagCloud) {
      res.locals({
        tagCloud: tagCloud
      });
      return next();
    });
  };

  addDefaultContext = function(req, res, next) {
    res.locals({
      blogTitle: config.blogTitle,
      description: config.description,
      copy: config.copyright,
      author: config.author,
      disqus: config.disqus,
      req: req
    });
    return next();
  };

  addCsrfToken = function(req, res, next) {
    res.locals({
      csrf: req.session._csrf
    });
    return next();
  };

  overwritePageIndex = function(req, res, next) {
    var page;
    page = parseInt(req.query.page);
    if (isNaN(page)) {
      page = 1;
    }
    if (page < 1) {
      page = 1;
    }
    req.query.page = page;
    return next();
  };

  app.configure(function() {
    app.set('port', process.env.PORT || 3000);
    app.set('views', "" + __dirname + "/views");
    app.set('view engine', 'jade');
    app.use(express.favicon());
    app.use(express.logger('dev'));
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(express.cookieParser(config.cookieSeed));
    app.use(express.session());
    app.use(auth.passport.initialize());
    app.use(auth.passport.session());
    app.use(app.router);
    app.use(express.csrf());
    app.use(require('less-middleware')({
      src: "" + __dirname + "/public"
    }));
    return app.use(express["static"](path.join(__dirname, 'public')));
  });

  app.configure('development', function() {
    return app.use(express.errorHandler());
  });

  app.all('/admin*', auth.ensureAuthenticated({
    failureRedirect: '/login'
  }), addCsrfToken);

  app.get('/admin/entries*', overwritePageIndex);

  app.get('/', addRecentEntries, addTagCloud, overwritePageIndex, addDefaultContext);

  app.get('/tag/*', addRecentEntries, addTagCloud, overwritePageIndex, addDefaultContext);

  app.get('/entry/*', addRecentEntries, addTagCloud, addDefaultContext);

  app.get('/admin/preview', addRecentEntries, addTagCloud, addDefaultContext);

  app.get('/', function(req, res) {
    return Entry.getIndexEntries(req.query.page, function(err, entries, context) {
      if (!err) {
        return res.render('index', context);
      }
      return res.send('error');
    });
  });

  app.get('/atom', function(req, res) {
    return res.render('atom');
  });

  app.get('/entry/:name', function(req, res) {
    return Entry.findByName(req.params.name, function(err, entry) {
      if (!err) {
        return res.render('entry', {
          entry: entry
        });
      }
      return res.send('error');
    });
  });

  app.get('/tag/:name', function(req, res) {
    var tag;
    tag = req.params.name;
    res.locals({
      tag: tag
    });
    return Entry.getTagEntries(req.query.page, tag, function(err, entries, context) {
      if (!err) {
        return res.render('tag', context);
      }
      return res.send('error');
    });
  });

  app.get('/login', function(req, res) {
    return res.render('login');
  });

  app.post('/login', auth.authenticate({
    successRedirect: '/admin',
    failureRedirect: '/login'
  }));

  app.get('/logout', function(req, res) {
    req.logout();
    return res.redirect('/login');
  });

  app.get('/admin', function(req, res) {
    return res.render('admin/index');
  });

  app.get('/admin/entries', function(req, res) {
    return Entry.getAdminEntries(req.query.page, function(err, entries, context) {
      if (!err) {
        return res.render('admin/entries', context);
      }
      return res.send('error');
    });
  });

  app.get('/admin/entry', function(req, res) {
    return res.render('admin/edit', {
      isNew: true
    });
  });

  app.get('/admin/entry/:name', function(req, res) {
    return Entry.findByName(req.params.name, function(err, entry) {
      if (!err) {
        return res.render('admin/edit', entry);
      }
      return res.send('error');
    });
  });

  genOnComplete = function(res) {
    return function(err, entry) {
      return res.send(!err ? 'success' : 'error');
    };
  };

  app.post('/admin/entry/:name', function(req, res) {
    var entry;
    entry = new Entry(req.body);
    return entry.save(genOnComplete(res));
  });

  app.put('/admin/entry/:name', function(req, res) {
    return Entry.findByNameAndUpdate(req.params.name, req.body, genOnComplete(res));
  });

  app["delete"]('/admin/entry/:name', function(req, res) {
    return Entry.findByNameAndRemove(req.params.name, genOnComplete(res));
  });

  app.get('/admin/preview', function(req, res) {
    return res.render('preview');
  });

  http.createServer(app).listen(app.get('port'), function() {
    return console.log("Express server listening on port " + (app.get('port')));
  });

}).call(this);
